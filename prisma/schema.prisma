generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NO_SSL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  isTwoFactorEnabled    Boolean                @default(false)
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  DraftPick             DraftPick[]
  Game                  Game[]
  GameDetail            GameDetail[]
  Match                 Match[]
  TeamMember            TeamMember[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String
  id      String   @id @default(cuid())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Match {
  id          Int         @id @default(autoincrement())
  date        DateTime    @db.Date
  mvp_id      String?
  status      MatchStatus @default(SCHEDULED)
  location_id Int?
  match_type  String      @default("normal")
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?   @default(now()) @db.Timestamptz(6)
  DraftPick   DraftPick[]
  Game        Game[]
  Location    Location?   @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User        User?       @relation(fields: [mvp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Team {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  team_type  Int?         @default(1)
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @default(now()) @db.Timestamptz(6)
  logo       String?
  DraftPick  DraftPick[]
  Team1      Game[]       @relation("Team1")
  Team2      Game[]       @relation("Team2")
  GameDetail GameDetail[]
  TeamType   TeamType?    @relation(fields: [team_type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TeamMember TeamMember[]
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(255)
  description String?
  Match       Match[]
}

model DraftPick {
  id         Int       @id @default(autoincrement())
  match_id   Int
  team_id    Int
  pick_order Int
  user_id    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  Match      Match     @relation(fields: [match_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Team       Team      @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Game {
  id          Int          @id @default(autoincrement())
  match_id    Int
  game_number Int          @db.SmallInt
  team1_id    Int?
  team2_id    Int?
  mvp_id      String?
  status      MatchStatus  @default(SCHEDULED)
  Match       Match        @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User        User?        @relation(fields: [mvp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Team1       Team?        @relation("Team1", fields: [team1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Team2       Team?        @relation("Team2", fields: [team2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  GameDetail  GameDetail[]
}

model GameDetail {
  id         Int           @id @default(autoincrement())
  game_id    Int
  event_type GameEventType
  player_id  String?
  minute     Int?          @db.SmallInt
  details    String?
  team_id    Int?
  Game       Game          @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User?         @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Team       Team?         @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TeamMember {
  id         Int       @id @default(autoincrement())
  team_id    Int
  user_id    String
  is_captain Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  Team       Team      @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([team_id, user_id], map: "unique_team_member")
}

model TeamType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  Team        Team[]
}

enum UserRole {
  ADMIN
  USER
}

enum MatchStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELED
}

enum GameEventType {
  Goal
  Assist
  Penalty
  YellowCard
  RedCard
  Substitution
}
